const Cart = require('../models/cartModel');
exports.getCart = async (req,res,next)=>{ try{ const c = await Cart.findOne({ userId: req.user._id }); res.json(c || { items: [] }); }catch(e){next(e)} };
exports.addItem = async (req,res,next)=>{ try{ let c = await Cart.findOne({ userId: req.user._id }); if(!c) c = await Cart.create({ userId: req.user._id, items: [] }); c.items.push({ productId: req.body.productId, variantId: req.body.variantId, quantity: req.body.quantity||1, addedAt: new Date() }); c.updatedAt = new Date(); await c.save(); res.json(c); }catch(e){next(e)} };
exports.updateItem = async (req,res,next)=>{ try{ const c = await Cart.findOne({ userId: req.user._id }); if(!c) return res.status(404).end(); const it = c.items.id(req.params.itemId); if(!it) return res.status(404).end(); it.quantity = req.body.quantity; c.updatedAt = new Date(); await c.save(); res.json(c); }catch(e){next(e)} };
exports.removeItem = async (req,res,next)=>{ try{ const c = await Cart.findOne({ userId: req.user._id }); if(!c) return res.status(404).end(); c.items = c.items.filter(i=> i._id.toString() !== req.params.itemId); await c.save(); res.json(c); }catch(e){next(e)} };
exports.merge = async (req,res,next)=>{ try{ const guestItems = req.body.items || []; let c = await Cart.findOne({ userId: req.user._id }); if(!c) c = await Cart.create({ userId: req.user._id, items: [] }); for(const gi of guestItems){ c.items.push({ productId: gi.productId, variantId: gi.variantId, quantity: gi.quantity||1, addedAt: new Date() }); } c.updatedAt = new Date(); await c.save(); res.json(c);}catch(e){next(e)} };
exports.clear = async (req,res,next)=>{ try{ await Cart.findOneAndDelete({ userId: req.user._id }); res.json({message:'cleared'});}catch(e){next(e)} };
